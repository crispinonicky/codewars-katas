//Very simple, given a number, find its opposite.

function opposite(number) {
  return number * -1
}

// You are going to be given a word. Your job is to return the middle character 
// of the word. If the word's length is odd, return the middle character. If the 
// word's length is even, return the middle 2 characters.

function getMiddle(s){

  return (s.length % 2 == 0) ? 
  s[Math.floor(s.length/2) - 1] + s[Math.floor(s.length/2)] :
  s[Math.ceil(s.length/2) - 1]
  
}

// Simple, given a string of words, return the length of the shortest word(s).

// String will never be empty and you do not need to account for
// different data types.

function findShort(s){


  let shortest = 99999
  let array = s.split(" ")
  
  for (i = 0; i < array.length; i++){
    if (array[i].length < shortest) {
      shortest = array[i].length
    }
  }
  
  return shortest
//   console.log(array)
  
}

// In this little assignment you are given a string of space separated numbers, 
// and have to return the highest and lowest number.

function highAndLow(numbers){
  
  let numArr = numbers.split(" ")
  
//   console.log(numArr)
  
  for (i = 0; i < numArr.length; i++){
    numArr[i] = parseInt(numArr[i])
  }
  
  
  numArr.sort(function(a, b){return a-b});
  
  console.log(numArr)
  
  return (numArr[numArr.length - 1] + " " + numArr[0])
  
}

// Create a function that returns the sum of the two lowest positive 
// numbers given an array of minimum 4 integers. No floats or empty 
// arrays will be passed.

function sumTwoSmallestNumbers(numbers) { 

  let small1 = 9999999999
  let small2 = 9999999999
   
   for (i = 0; i < numbers.length; i++) {
     if (numbers[i] < small1){
       small1 = numbers[i]
     }
     
   }
   
  //  console.log(small1)
  //  console.log(small2)
   
   for (i = 0; i < numbers.length; i++){
     if(numbers[i] < small2 && numbers[i] != small1){
       small2 = numbers[i]
       }
   }
   
   
   return small1 + small2
   
   
  };

// Mr. Scrooge has a sum of money 'P' that wants to invest, and he wants to 
// know how many years 'Y' this sum has to be kept in the bank in order for this sum 
// of money to amount to 'D'.

// The sum is kept for 'Y' years in the bank where interest 'I' is paid yearly, 
// and the new sum is re-invested yearly after paying tax 'T'

// Note that the principal is not taxed but only the year's accrued interest

function calculateYears(principal, interest, tax, desired) {
   
  let counter = 0;
  
  while (principal < desired) {
    principal = principal + (principal * interest) - (principal * interest * tax);
    counter++;
  }
  
  return counter;
  
}

// You have an array of numbers.
// Your task is to sort ascending odd numbers but even numbers must be on their places.

// Zero isn't an odd number and you don't need to move it. If you have an empty array, 
// you need to return it.

function sortArray(array) {
  
  let oddsArr = [];
  
  for (i = 0; i < array.length; i++){
    if (array[i] % 2 == 1){
      oddsArr.push(array[i]);
      array[i] = " ";
    }
  }
    
  oddsArr.sort(function (a,b) {return a - b});
  
  for (i = 0; i < array.length; i++){
    if (array[i] === ' '){
      array.splice(i, 1, oddsArr[0])
      oddsArr.shift()
    }
  }
  
//   for (i = 0; i < array.length; i++){
//     if (array[i] == undefined){
//       array[i] = 0  
//     }
//   }
  
//   console.log(oddsArr)
  
//   console.log(array)
  return array
  
}

// Given: an array containing hashes of names

// Return: a string formatted as a list of names separated by commas except 
// for the last two names, which should be separated by an ampersand.

function list(names){

  if (names.length == 1){
    return names[0].name
  } else if (names.length == 2){
    return names[0].name + ' & ' + names[1].name
  } else if (names.length === 0){
    return ''
  }
  
  let nameStr = ''
  
  for (i = 0; i < names.length; i++) {
    if (i == names.length - 1){
      return (nameStr + "& " + names[i].name)
    } else if (i === names.length - 2){
      nameStr = nameStr + names[i].name + " "
    } else {
    nameStr = nameStr + names[i].name + ", "
    }
  }
  
  console.log(nameStr)

  console.log(names.length)
}

// In this little assignment you are given a string of space separated numbers, 
// and have to return the highest and lowest number.

function highAndLow(numbers){

  let numArr = numbers.split(" ").sort(function(a,b) {return a - b})
  
  
  return(numArr[numArr.length - 1] + " " + numArr[0])
  
  
}


// Move the first letter of each word to the end of it, then add "ay" to the end
// of the word. Leave punctuation marks untouched.


function pigIt(str){
  
  let wordArr = str.split(" ")
  
//   console.log(wordArr)
  
  let map1 = wordArr.map(x => x.substring(1, x.length) +  x[0] + 'ay');
  
  
  for (i = 0; i < map1.length; i++) {
    if (map1[i].length === 3 && (map1[i][0] !== 'o')){
      console.log(map1[0][0])
      map1[i] = map1[i][0]
    } 
  }
  
  for (i = 0; i < map1.length; i++) {
    if (map1[i] === "O") {
      map1[i] = "Oay"
    }
  }
  
  console.log(map1)
  
  return map1.join(" ")
  
}

// Write a function, which takes a non-negative integer (seconds) as input and 
// returns the time in a human-readable format (HH:MM:SS)

function humanReadable(seconds) {
  
  hours = (Math.floor(seconds/3600)).toString()
  mins = (Math.floor(((seconds/3600) - hours) * 60)).toString()
  secs = (seconds % 60).toString()
  
  if (hours.length === 1){
    hours = "0" + hours
  }
  
  if (mins.length === 1){
    mins = "0" + mins
  }
  
  if (secs.length === 1){
    secs = "0" + secs
  }

return(hours +":" + mins + ":" + secs)
  
}

// Write a function called that takes a string of parentheses, and determines 
// if the order of the parentheses is valid. The function should return true if 
// the string is valid, and false if it's invalid.

function validParentheses(parens){

  if (parens[0] === ")" || parens[parens.length - 1] == "(") {
    return false
  }
  
  let parenCounter = 0
  
  for (i = 0; i < parens.length; i++) {

    parens[i] == "(" ? parenCounter++ : parenCounter--;
    
  }

  return parenCounter == 0 ? true : false;

}

// Write a function that accepts an array of 10 integers (between 0 and 9), that returns a string 
// of those numbers in the form of a phone number.

function createPhoneNumber(numbers){
  
  let strArr = numbers
  
  for (i = 0; i < strArr.length; i++) {
    strArr[i] = strArr[i].toString()
  }
  
//   console.log(strArr)
  
  strArr[0] = "(" + strArr[0]
  
  strArr[2] = strArr[2] + ") "
  
  console.log(strArr)
  
  strArr[5] = strArr[5] + "-"
  
  let final
  
  for (i = 0; i < strArr.length; i++){
    final += strArr[i]
  }
  
//   return final  
    
  return final.slice(9)
}

// Write an algorithm that takes an array and moves all of the zeros to the end, preserving 
// the order of the other elements.

var moveZeros = function (arr) {
  
  let nonZero = arr.filter(item => item !== 0)
  let zeros = arr.filter(item => item === 0) 
  
  console.log(nonZero)
  
  return(nonZero.concat(zeros))
  
}

// In this example you have to validate if a user input string is alphanumeric. The given string is not
// nil, so you don't have to check that.

function alphanumeric(string){

  if (string === "") {
    return false
  }
  
  console.log(string)
  
  let strArray = string.split("")
  
  console.log(strArray)
  
  for (i = 0; i < string.length; i++){
  console.log(string.charCodeAt(i))
    if (string.charCodeAt(i) < 48){
      return false
    } else if (string.charCodeAt(i) > 122){
      return false
    } else if (string.charCodeAt(i) > 57 && string.charCodeAt(i) < 65){
      return false
    } else if (string.charCodeAt(i) > 90 && string.charCodeAt(i) < 97){
      return false
    } 
  }
  
  return true
  
}

// Find the number of divisors of a positive integer n.

function getDivisorsCnt(n){

  let o = n;
  let total = 0; 
  
  while(o > 0){
   if(n%o === 0){
     total++
   }
   o--;
  }
  return total;
 }

// Your task in order to complete this Kata is to write a function which formats
// a duration, given as a number of seconds, in a human-friendly way.

// The function must accept a non-negative integer. If it is zero, it just returns
// "now". Otherwise, the duration is expressed as a combination of years, days, 
// hours, minutes and seconds.

function formatDuration (seconds) {
  
  if (seconds === 0) {
    return "now"
  }
  
  let secs = seconds % 60
  let mins = Math.floor(seconds/60) % 60
  let hours = Math.floor(seconds/3600) % 24
  let days = Math.floor(seconds/86400) % 365
  let years = Math.floor(seconds/(86400 * 365))
  
  let timeArr = [years, days, hours, mins, secs]
  
  console.log(timeArr)
  
//   let finalArr = timeArr.filter(x => x > 0)
  
  if (timeArr[4] === 1){
    timeArr[4] = timeArr[4] + " second"
  } else {
    timeArr[4] = timeArr[4] + " seconds"
  }
  
  if (timeArr[3] === 1){
    timeArr[3] = timeArr[3] + " minute"
  } else {
    timeArr[3] = timeArr[3] + " minutes"
  }
  
  if (timeArr[2] === 1){
    timeArr[2] = timeArr[2] + " hour"
  } else {
    timeArr[2] = timeArr[2] + " hours"
  }
  
  if (timeArr[1] === 1){
    timeArr[1] = timeArr[1] + " day"
  } else {
    timeArr[1] = timeArr[1] + " days"
  }
  
  if (timeArr[0] === 1){
    timeArr[0] = timeArr[0] + " year"
  } else {
    timeArr[0] = timeArr[0] + " years"
  }
  
  for (i = timeArr.length - 1; i >= 0; i--){
    if (timeArr[i][0] == "0"){
      console.log("remove: " + timeArr[i])
      timeArr.splice(i, 1)
    } else {
      console.log("keep: " + timeArr[i])
    }
  }
  
  timeArr.reverse()
  
  console.log(timeArr)
  
//   console.log("Seconds: " + secs)
//   console.log("Minutes: " + mins)
//   console.log("Hours: " + hours)
//   console.log("Days: " + days)
//   console.log("Years: " + years)

  if (timeArr.length == 1){
    return timeArr[0]
  } else if (timeArr.length == 2){
    return timeArr[1] + " and " + timeArr[0]
  } else if (timeArr.length == 3){
    return timeArr[2] + ", " + timeArr[1] + " and " + timeArr[0]
  } else if (timeArr.length == 4){
    return timeArr[3] + ", " + timeArr[2] + ", " + timeArr[1] + " and " + timeArr[0]
  } else {
    return timeArr[4] + ", " + timeArr[3] + ", " + timeArr[2] + ", " + timeArr[1] + " and " + timeArr[0]    
  }

}

// This time no story, no theory. The examples below 
// show you how to write function accum:

function accum(s) {

  let strArr = s.split("")
  
  for (i = 0; i < strArr.length; i++) {
    strArr[i] = strArr[i].toUpperCase()
  }
  
  for (i = 0; i < strArr.length; i++) {
    let copy = strArr[i]
    for (j = 0; j < i; j++){
      strArr[i] = strArr[i].toLowerCase() + copy
    }
    strArr[i] = strArr[i].split("").reverse().join("")
  }
  
  let solution = ""
  
  for (i = 0; i < strArr.length; i++){
    if (i == strArr.length - 1){
      solution += strArr[i]
    } else {
    solution += strArr[i] + '-'
    }
  }
  
  return solution

}

// You are given an array strarr of strings and an integer k. Your task is to 
// return the first longest string consisting of k consecutive strings taken in 
// the array.

function longestConsec(strarr, k) {


  if (strarr.length === 0 || k > strarr.length || strarr.length <= 0) {
    return ""
  }
  
    let longestString = ""
    let stringArr = []
    let finalArr = []
      
      for (i = 0; i < strarr.length - k + 1; i++) {
        let currentWord = strarr[i]
        let j = 0
        while (j < k){
          stringArr.push(strarr[i])
          j++
          i++
        }
        stringArr.push("-")
        i = i - k
        j = 0
        finalArr.push(stringArr.join(""))
      } 
      
      let bigString = finalArr[finalArr.length - 1].slice(0, finalArr[finalArr.length - 1].length - 1)
       
      let solutionArr = bigString.split("-")
      
  //     console.log(solutionArr)
      
      for(i = 0; i < solutionArr.length; i++) {
        if (longestString.length < solutionArr[i].length){
          longestString = solutionArr[i]
        }
      }
      
      return longestString
      
  }

// Complete the solution so that it returns true if the first argument(string) 
// passed in ends with the 2nd argument (also a string).

  function solution(str, ending){

    let solution = ""
    
    for (i = str.length - 1; i > (str.length - 1) - ending.length; i--){
      console.log(str[i])
      solution = str[i] + solution
    }
    
  //   return solution
  
  if (solution === ending){
    return true
  } else {
    return false
  }
    
  }

//   Make a program that filters a list of strings and returns a list with only 
// your friends name in it.

// If a name has exactly 4 letters in it, you can be sure that it has 
// to be a friend of yours! Otherwise, you can be sure he's not...

// Ex: Input = ["Ryan", "Kieran", "Jason", "Yous"], Output = ["Ryan", "Yous"]

// DONE IN PYTHON:

  def friend(x):

    final = []
    
    for i in x:
        if len(i) == 4:
            final.append(i)
            
    return final

// Remove string spaces (PHP)

function no_space(string $s): string {
  
  $solution = explode(" ",$s);
  
//   print_r ($solution);
  
  $solution = join($solution);
  
  return ($solution);
  
}

// PHP Bonus puzzle:

function bonusTime($salary, $bonus) {

  if ($bonus == true) {
    return (('$') . $salary * 10);
  } else {
    return (('$') . $salary);
  }
    
    
}

// Substituting variables into strings: Padded Numbers (PHP)

function solution($value){
  
  while((strlen(strval($value))) < 5){
    $value = "0" . $value;
    print($value);   
  }
  
  return "Value is " . $value;
  
};

// JS Multiples of 3 puzzle:

function divisibleByThree(str){

  let sum = 0
  
  let arr = str.split("")
  
//   console.log(arr)
  
  arr.forEach(eachNum => {
    eachNum = parseInt(eachNum)
    sum += eachNum
  })
  
  if (sum % 3 === 0) {
    return true
  }
  
  
  return false

}

// Directions reduction

function dirReduc(arr){

  for (i = 0; i < arr.length; i++) {
  
    if (arr[i] == "NORTH" && arr[i+1] == "SOUTH"){
      arr.splice(i, 2)
      i = i - 2
    }    
    
    if (arr[i] == "SOUTH" && arr[i+1] == "NORTH"){
      arr.splice(i, 2)
      i = i - 2
    }    
    
    if (arr[i] == "EAST" && arr[i+1] == "WEST"){
      arr.splice(i, 2)
      i = i - 2
    }    
    
    if (arr[i] == "WEST" && arr[i+1] == "EAST"){
      arr.splice(i, 2)
      i = i - 2
    }

  }
    
  return arr
  
}

// Class average (PHP)

function betterThanAverage($classPoints, $yourPoints) {
  
  $avg = array_sum($classPoints)/count($classPoints);
  
  echo $avg;
  
  if ($yourPoints > $avg) {
    return true;
  }
  
  return false;
  
}

// Sentencify (PHP)

function sentencify($words){
    
  $words[0] = ucfirst($words[0]);
  $words[count($words) - 1] = $words[count($words) - 1] . ".";
  $final = implode(" ", $words);
  
  return $final;
  
}

// Product of consecutive Fib numbers (JS)

function productFib(prod){
    
  let fib = [0,1]
  
  for (i = 0; i < 99; i++) {
    fib.push(fib[i] + fib[i + 1])
  }
    
  for (i = 0; i < fib.length; i++) {
  
    if (fib[i] * fib[i + 1] == prod) {
      return [fib[i], fib[i + 1], true]
    } else if (fib[i] * fib[i + 1] > prod) {
      return [fib[i], fib[i + 1], false]
    }
    
  }
      
}

// Will there be enough space

function enough(cap, on, wait) {

  if (on + wait <= cap)
    return 0
  else
    return (on + wait - cap)
}

// Primes in numbers

function primeFactors(n){
    
    let primeArr = []
    let counter = 2
    
    if (n == 1) {
      return n
    }
    
    while (n > 1) {
      if (n % counter == 0) {
        n = n / counter
        primeArr.push(counter)
        counter = 2
      } else {
        counter++
      }
    }
    
    let power = 1
    let finalArr = []
    
    for (i = 0; i < primeArr.length; i++) {
      if (primeArr[i] !== primeArr[i + 1] && power == 1) {
        finalArr.push("(" + primeArr[i] + ")")
      } else if (primeArr[i] !== primeArr[i + 1]) {
        finalArr.push("(" + primeArr[i] + "**" + power + ")")
        power = 1
      } else if (primeArr[i] == primeArr[i + 1]) {
        power++
      }
    }  
        
    return finalArr.join("")
    
}

// Perimeter of squares in rectangles

function perimeter(n) {
    
  let fib = [0,1]
  
  for (i = 0; i < n; i++) {
    fib.push(fib[i] + fib[i + 1])
  }
    
  fib.shift()
    
  const final = fib.map(num => num * 4);
    
  let sum = 0
  
  for (i = 0; i < final.length; i++) {
    sum += final[i]
  }
  
  return sum
    
}

// Sort out the men from the boys

function menFromBoys($arr) {
  
  $manArr = [];
  $boyArr = [];
  
  for ($i = 0; $i < count($arr); $i++) {
    print_r($arr[$i] . "\n");
    
    if ($arr[$i] % 2 === 0){ 
      array_push($manArr, $arr[$i]);
    } else {
      array_push($boyArr, $arr[$i]);
    }
  
  }
  
  sort($manArr);
  rsort($boyArr);

  $final = array_merge($manArr, $boyArr);
    
  return array_values(array_unique($final));
  
}

// Replace with alphabet position

function alphabet_position(string $s): string {

  $s = strtolower($s);

  $alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m',
  'n','o','p','q','r','s','t','u','v','w','x','y','z'];
    
  for ($i = 0; $i < strlen($s); $i++) {
    if (in_array($s[$i], $alphabet) === true) {
      $olution .= (array_search($s[$i], $alphabet) + 1) . " ";
    }
  }
  
  return substr($olution, 0, strlen($olution) - 1);
  
}

// Find the missing letter

function find_missing_letter(array $array): string {

  for ($i = 0; $i < count($array); $i++) {
    if (ord($array[$i]) + 1 !== ord($array[$i + 1])) {
      return chr(ord($array[$i]) + 1);
    }
  }
  
}

// Split strings

function solution($str) {

  if (strlen($str) % 2 === 1) {
    $str .= "_";
  }
  
  $olution = [];

  for ($i = 0; $i < strlen($str); $i = $i + 2) {
    array_push($olution, substr($str, $i, 2));
  }
  
  return $olution;

}

// Convert to camelcase

function toCamelCase($str){

if (strpos($str, '-') !== false) {
    $plit = explode("-", $str);
  } else {
    $plit = explode("_", $str);
  }
  
  $olution = [];

  for ($i = 1; $i < count($plit); $i++) {
    $plit[$i] = ucfirst($plit[$i]);
  }
  
  
//   $plit = $str[0] . substr($plit, 1);
  return(implode("", $plit));
  
}


// Numerical palindrome #1

def palindrome(num):

    if isinstance(num, str):
        return "Not valid"
    elif (num < 0):    
        return "Not valid"
    
    rev = int(str(num)[::-1])
    
    if (rev == num):
        return True
        
    return False

// New cashier does not know about space or shift

ction getOrder(input) {
  
  let menu = ["Burger", "Fries", "Chicken", "Pizza", "Sandwich", "Onionrings",
  "Milkshake", "Coke"]
  
  let order = []
  
  let currentWord = ""
  
  for (i = 0; i < input.length; i++){
    currentWord += input[i]
//     console.log(currentWord)
    for (j = 0; j < menu.length; j++) {
      if (currentWord === menu[j].toLowerCase()) {
        order.push(menu[j])
        currentWord = ""
      }
    }
  }
    
  let final = []
  
  for (i = 0; i < menu.length; i++) {
    for (j = 0; j < order.length; j++) {
      if (order[j] === menu[i]) {
        final.push(order[j])
      }
    }
  }
  
  return final.join(" ")
  
}

// Strings mix

function mix(s1, s2) {
  
  let checked = []
  let length = Math.abs(s1.length - s2.length)
  
  for (i = 0; i < length; i++) {
  
    if (s1.length > s2.length) {
      s2 += " "
    } else if (s2.length > s1.length) {
      s1 += " "
    } 
    
  }
  
  s1 = s1.split("")
  s2 = s2.split("")
 
  for (i = 0; i < s1.length; i++) {
    if (s1[i].charCodeAt(0) >= 65 && s1[i].charCodeAt(0) <= 90) {
      s1.splice(i, 1, " ")
    }
    
    if (s2[i].charCodeAt(0) >= 65 && s2[i].charCodeAt(0) <= 90) {
      s2.splice(i, 1, " ")
    }    
  }
 
  s1 = s1.join("")
  s2 = s2.join("")
 
    for (i = 0; i < s1.length; i++) {
    
      if (checked.indexOf(s1[i]) === -1) {
        checked.push(s1[i])
      }
      if (checked.indexOf(s2[i]) === -1) {
        checked.push(s2[i])
      }
      
    }
    
    for (i = 0; i < checked.length; i++) {
      if (checked[i].charCodeAt(0) < 97 || checked[i].charCodeAt(0) > 122) {
        checked.splice(i, 1)
        i--
      }
    }
        
    let count1 = 0
    let count2 = 0
    let final = []

    for (i = 0; i < checked.length; i++) {
    
      for (j = 0; j < s1.length; j++) {
      
        if (s1[j].toLowerCase() === checked[i]) {
          count1++
        }
        
        if (s2[j].toLowerCase() === checked[i]) {
          count2++
        } 
        
      }
      
      if (count1 > count2 && count1 > 1) {
        final.push("1:" + checked[i].repeat(count1) + "/$")
      } else if (count2 > count1 && count2 > 1) {
        final.push("2:" + checked[i].repeat(count2) + "/$")
      } else if (count1 === count2 && count1 > 1) {
        final.push("=:" + checked[i].repeat(count1) + "/")
      }
            
      count1 = 0
      count2 = 0
    
    }
    
    final.sort(function(a, b){
      return b.length - a.length || a.localeCompare(b);
    });
    
    final = final.join("").split("")
    
    for (i = 0; i < final.length; i++) {
      if (final[i] === "$") {
        final.splice(i, 1)
        i--
      }
    }
     
    return final.splice(0, final.length - 1).join("")
  }
 
// Range extraction

function solution(list){
  
 let final = []
 let starter = " "
 
 for (i = 0; i < list.length; i++) {

   if (list[i] !== list[i + 1] - 1) {
     final.push(list[i])
     starter = " "
   } else if (starter == " ") {
     starter = list[i]
     final.push(starter + "_")
   } 
 }
 
    for (i = 0; i < final.length; i++) {
      if (parseInt(final[i]) + 1 === parseInt(final[i + 1])) {
        final.splice(i, 1, parseInt(final[i]))
      }
    }
    
    let combine
    let solution = []
    
    for (i = 0; i < final.length; i++) {
      combine = final[i]
      if (typeof(final[i]) === "string"){
        combine = final[i].concat(final[i + 1])
        i++
      }
      solution.push(combine)
    }

   
   let test = []
   
   for (i = 0; i < solution.length; i++) {
     if (typeof(solution[i]) == 'string') {
       test = solution[i].split("")
       for (j = 0; j < test.length; j++) {
         if (test[j] === "_") {
           test.splice(j, 1, '-')
           test.join("")
         }
         
       }

       solution.splice(i, 1, test)
       test = test.join("")

     }
     
   }
    
 let actuallyAnswerLol = []
 
     for (i = 0; i < solution.length; i++) {
       if (typeof(solution[i]) == 'object') {
         console.log(solution[i].join(""))
         actuallyAnswerLol.push(solution[i].join(""))
         solution[i].splice(i, 1, solution[i].join(""))
       } else if (typeof(solution[i]) == 'number') {
         actuallyAnswerLol.push(solution[i])
       }
     }
 
 return actuallyAnswerLol.join(",")
 
}

// Persistent bugger

function persistence(num) {
   
   let str = num.toString()
   let counter = 0
   let solution = 1
   
   if (num < 10) {
     return counter
   }
   
   while (str.length > 1) {
   
     for (i = 0; i < str.length; i++) {
       solution *= parseInt(str[i])
     }
     
     str = solution.toString()
     solution = 1
     counter++
     
    }
      
   return counter
   
}


// Reverse words (PHP)

function reverseWords($str) {
  
  $arr = explode(" ", $str);
  
  foreach ($arr as &$word) {
    $word = strrev($word);
  }
  
  return (implode(" ", $arr));
  
}

// Deadfish (PHP)

function parse($data) {

  $val = 0;
  $solution = [];
  
  for ($i = 0; $i < strlen($data); $i++) {
  
    if ($data[$i] == "i") {
      $val++;
    } else if ($data[$i] == "d") {
      $val--;
    } else if ($data[$i] == "s") {
      $val = pow($val, 2);
    } else if ($data[$i] == "o") {
      array_push($solution, $val);
    }
    
  }
  
  return $solution;
  
}

// Reverse every other word

function reverse(str){
  
  let revArr = []
  str = str.split(" ")
  
  for (let i = 0; i < str.length; i++) {
    if (i % 2 === 1) {
      revArr.push(str[i])
    }
  }
  
  for (let i = 0; i < revArr.length; i++) {
    revArr.splice(i, 1, revArr[i].split("").reverse().join(""))
  }
  
  for (let i = 0; i < str.length; i++) {
    if (i % 2 === 1) {
      str.splice(i, 1, revArr[0])
      revArr.splice(0,1)
    }
    if (str[i] === "") {
      return str[i]
    }
  }
  
  return str.join(" ")
}

// Follow that spy

function findRoutes(routes) {
  
  let arr1 = routes[0];
  let startingPoint, endingPoint;
  let solution = [];
  
  for (i = 0; i < routes.length - 1; i++) {
    arr1 = arr1.concat(routes[i + 1]);
  }
  
  for (let i = 0; i < arr1.length; i++) {
    if (arr1.indexOf(arr1[i]) === arr1.lastIndexOf(arr1[i]) && i % 2 == 0) {
      startingPoint = arr1[i];
    } else if (arr1.indexOf(arr1[i]) === arr1.lastIndexOf(arr1[i]) && i % 2 == 1) {
      endingPoint = arr1[i];
    }
  }
    
  let starts = [];
  let ends = [];
  
  for (i = 0; i < arr1.length; i++) {

    i % 2 === 0 ? starts.push(arr[i]) : ends.push(arr[i])
    
  }
  
  let final = [startingPoint];
  let currentLocation = startingPoint;
  
  for (let i = 0; i < starts.length; i++) {
    if(starts[i] === currentLocation){
      final.push(ends[i]);
      currentLocation = ends[i];
      i = -1; 
      continue;
    }
  }
  
  return (final.join(", "));
 
}

// Consonant Value

function solve(s) {

  let score = 0;
  let scoreArr = [];
  
  for (let i = 0; i < s.length; i++) {
    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {
      scoreArr.push(score);
      score = 0; 
    } else {
      score += (s.charCodeAt(i) - 96)
    }
//     console.log(s[i] + " has a value of " + (s.charCodeAt(i) - 96))
  }
  
//   console.log(scoreArr);
  
  let solution = 0;
  
  for (i = 0; i < scoreArr.length; i++) {
    if (scoreArr[i] > solution) {
      solution = scoreArr[i];
    }
  } 
  
  return solution;
   
};

// Eliminate the intruders

 function eliminateUnsetBits(number) {

  let sum = 0;
  let power = 0;
  
  number.split("").forEach((x, i) => {
    x == 1 ? sum += 2 ** power : power--;
    power++;
  })
   
  return sum;
   
} 

// Binary Cleaner

function binaryCleaner(arr) {

  let arr1 = [];
  let arr2 = [];
  
  arr.forEach((x, i) => {
    x <= 1 ? arr1.push(x) : arr2.push(i);
  })
  
  return([arr1, arr2]);
  
}

// Length of sequence

var lengthOfSequence = function (arr, n) {
  
  return arr.filter((v) => (v === n)).length != 2 ? 0 : arr.lastIndexOf(n) - arr.indexOf(n) + 1;
  
};

// Odd one

function oddOne(arr) {

  let solution = -1;
  
  arr.forEach((x, i) => {
    x % 2 == 1 || x % 2 == -1 ? solution = i : console.log("Skipped");
  })
  
  return solution;
  
}

// Triangle perimeter

function trianglePerimeter(triangle){

  return( ( ( triangle.a.x - triangle.b.x   ) ** 2 + ( triangle.a.y - triangle.b.y   ) ** 2 ) ** .5) + (( ( triangle.b.x - triangle.c.x   ) ** 2 + ( triangle.b.y - triangle.c.y   ) ** 2 ) ** .5) + (( ( triangle.c.x - triangle.a.x   ) ** 2 + ( triangle.c.y - triangle.a.y   ) ** 2 ) ** .5) 
  
  
  // im cool
  
}

// You are a cube

function youAreACube (value){

  console.log(value)
  
  console.log(value ** (1/3))

  

  return (value ** (1/3)) % 1 == 0 || value ** (1/3) % 1 > .999999  ? true : false

}

// Street Fighter 2 Character Select Screen

function streetFighterSelection(fighters, position, moves){

  let solution = [];
  
  moves.forEach((x, i) => {
    if (x == 'up') {
      position[1] = 0;
    } else if (x == 'down') {
      position[1] = 1;
    } else if (x == 'right' && position[0] != 5) {
      position[0]++;
    } else if (x == 'left' && position[0] != 0) {
      position[0]--;
    } else if (x == 'right' && position[0] == 5) {
      position[0]-=5;
    } else if (x == 'left' && position[0] == 0) {
      position[0]+=5;
    } 
      solution.push(fighters[position[1]][position[0]]);
  })
  
  return solution;
    
}

// Who likes it?

function likes(names) {
  
  if (names.length == 0) {
    return "no one likes this";
  } else if (names.length == 1) {
    return names[0] + " likes this";
  } else if (names.length == 2) {
    return names[0] + " and " + names[1] + " like this";
  } else if (names.length == 3) {
    return names[0] + ", " + names[1] + " and " + names[2] + " like this";
  } else {
    return names[0] + ", " + names[1] + " and " + (names.length - 2) + " others like this";
  }
  
}

// String Transformer

function stringTransformer(str) {
  
  let strArr = str.split("");
  
  strArr.forEach((x, i) => {
    x.charCodeAt(0) >= 97 ? strArr.splice(i, 1, x.toUpperCase()) : 
    strArr.splice(i, 1, x.toLowerCase());
  })
  
  return strArr.join("").split(" ").reverse().join(" ");
  
}

// Polynomials

function differentiate(equation, point){
  
  let solution = 0;
  let signs = [];
  let values = equation.split(/[-+]+/);
  
  for (let i = 0; i < equation.length; i++) {
    equation[i] == '-' || equation[i] == '+' ? signs.push(equation[i]) : 0;
  }
  
  values[0] == '' ? values.shift() : signs.unshift('+');
  let copy = [...values]; 
  
  for (let i = 0; i < values.length; i++) {
  
    parseInt(values[i]) == values[i] ? values.splice(i, 1, "0") : 0;
  
    values.splice(i, 1, values[i].replace('x', `*${point}`))
    values[i][0] == '*' ? values.splice(i, 1, values[i].slice(1)) : 0;
    
    let base = values[i];
    values[i].includes("^") == true ? 
      base = values[i].split("^").slice(-1)[0] * parseInt(values[i]) : 0;
        
    if(base !== values[i]) {
      let current = values[i].replace(values[i].split('*')[0], base);
      if (current.includes("^") == true) {
        let power = current.split("^")[current.split("^").length - 1] - 1
        values.splice(i, 1, `${base}*(${point})^${power}`)
      } else {
        values.splice(i, 1, current);
      }  
    }
    
    values[i].includes('*') == true && values[i].includes('^') != true ?
      values.splice(i, 1, parseInt(copy[i])) : 0;
      
    copy[i] == 'x' ? values.splice(i, 1, 1) : 0;
    values.splice(i, 1, values[i].toString());

    values[i].toString().includes("^") == true ? 
      values.splice(i, 1, eval(values[i].replace("^", "**"))) : 0;
      
    values.length > signs.length ? signs.unshift('+') : 0;
     
    signs[i] == '+' ? solution += parseInt(values[i]) : solution -= parseInt(values[i]);
  }
  
  return(solution);
  
}

// Digital Root

function digital_root(n) {
  
  while (n.toString().length > 1) {
    n = n.toString().split("").map(x => 
      Number(x)
    ).reduce((a,b) => 
      a += b
    )
  }
  
  return n;
  
}

// Character with longest consecutive repetition

function longestRepetition(s) {

  let maxArr = ['', 0];
  let counter = 1;
  
  for (let i = 0; i < s.length - 1; i++) {
    s[i] == s[i + 1] ? counter++ : counter = 1;
    counter > maxArr[1] ? maxArr.splice(0, 2, s[i], counter) : 0;
  }
   
  return maxArr;
}

// Mexican Wave

function wave(str){

  let solution = [];
    
  for (let i = 0; i < str.length; i++) {
    str[i] == " " ?
    0 : 
    solution.push(
    str.substr(0, i) + 
    str[i].toUpperCase() + 
    str.substr(i + 1, str.length - 1)
    ); 
  }
  
  return solution;
  
}

// Love vs Friendship

function wordsToMarks(string){

  let solution = 0;
  
  for (let i = 0; i < string.length; i++) {
    solution += string[i].charCodeAt() - 96
  }
  
  return solution;
  
}

// Move Zeroes

var moveZeros = function (arr) {
  
  let nonZero = arr.filter(item => item !== 0)
  let zeros = arr.filter(item => item === 0) 
  
  console.log(nonZero)
  
  return(nonZero.concat(zeros))
  
}

// Consecutive Fibs

function productFib(prod){
     
  let fib = [0,1]
   
  for (i = 0; i < 99; i++) {
    fib.push(fib[i] + fib[i + 1])
  } 
    
  for (i = 0; i < fib.length; i++) {
  
    if (fib[i] * fib[i + 1] == prod) {
      return [fib[i], fib[i + 1], true]
    } else if (fib[i] * fib[i + 1] > prod) {
      return [fib[i], fib[i + 1], false]
    }
    
  }
       
}

// Money Match

function doubleOrNothing(cash, wager, losses){

  let solution = (cash - (wager * (2**(losses - 1))));
  
  if (solution < 0) {
    solution = "I'll pay you back later"
  }
  
  return solution
  
}

// Paren counter

function validParentheses(parens){

  if (parens[0] === ")" || parens[parens.length - 1] == "(") {
    return false
  } 
  
  let parenCounter = 0
  
  for (i = 0; i < parens.length; i++) {
    if (parens[i] == "(") {
      parenCounter++
    } else {
      parenCounter--
    }
     
  }
   
  if (parenCounter === 0){
    return true
  } else {
    return false
  }


}

// Range of integers

function generateRange(min, max, step){
  
  let solution = [];
  
  for (let i = min; i <= max; i+= step) {
    solution.push(i);
  }
  
  return solution;
   
}

// Rats rats we're the rats

var countDeafRats = function(town) {

  let numRats = town.split("O").length - 1;  
  let townArr = town.replace(/\s/g, '').replace("P", "PP").match(/.{1,2}/g);
  
  let faceRight = true;
    
  for (let i = 0; i < townArr.length; i++) {
    
    townArr[i] == "PP" ? faceRight = false : 0;
    townArr[i] == "~O" && faceRight == true ? numRats-- : 0;
    townArr[i] == "O~" && faceRight == false ? numRats-- : 0;
    
  }
  
  return numRats;
}

// Square every digit

function squareDigits(num){

let solution = "";
  
  num.toString().split("").forEach((x, i) => {
    solution += (x ** 2).toString();
  })
  
  return parseInt(solution);
  
}

// Sum of Odd Numbers

function rowSumOddNumbers(n) {
  
  let firstNum = n ** 2 - (n - 1);
  let sum = 0;
    
  for (let i = 0; i < n * 2; i+=2) {
    sum += firstNum + i;
  }
  
  return sum;
  
}

// Row of the odd triangle

function oddRow(n) {  

  let firstNum = n ** 2 - (n - 1);
  let nums = [];
    
  for (let i = 0; i < n * 2; i+=2) {
    nums.push(firstNum + i);
  }
  
  return nums;
  
}

